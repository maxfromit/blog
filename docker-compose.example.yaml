version: '3.6'

services:
  # world
  # minio (s3 storage)
  minio:
    image: minio/minio:RELEASE.2021-09-24T00-24-24Z
    restart: always
    entrypoint: sh
    command: -c 'mkdir -p /data/${PROJECT_NAME} && /opt/bin/minio server --address :8484 --console-address :8080 /data'
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - ./backend/minio/_volumes/data:/data
    labels:
      - traefik.enable=true
      - traefik.http.routers.${PROJECT_NAME}-minio.rule=Host(`${MINIO_HOST}`)
      - traefik.http.services.${PROJECT_NAME}-minio.loadbalancer.server.port=8080
      - traefik.http.routers.${PROJECT_NAME}-minio.tls=true
      - traefik.http.routers.${PROJECT_NAME}-minio.tls.certresolver=letsencrypt

  # mailhog (SMTP server)
  mailhog:
    image: mailhog/mailhog
    restart: always
    environment:
      MH_SMTP_BIND_ADDR: 0.0.0.0:${MAILHOG_SMTP_PORT}
    volumes:
      - ./backend/mailhog/_volumes/maildir:/maildir
    labels:
      - traefik.enable=true
      - traefik.http.routers.${PROJECT_NAME}-mailhog.rule=Host(`${MAILHOG_HOST}`)
      - traefik.http.services.${PROJECT_NAME}-mailhog.loadbalancer.server.port=8025
      - traefik.http.routers.${PROJECT_NAME}-mailhog.tls=true
      - traefik.http.routers.${PROJECT_NAME}-mailhog.tls.certresolver=letsencrypt

  # backend
  postgres:
    image: postgres
    restart: always
    volumes:
      - ./backend/postgres/_volumes/data:/var/lib/postgresql/data
      - ./backend/postgres/initdb.d:/docker-entrypoint-initdb.d:ro
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

  pgadmin:
    user: "${UID}:${GID}"
    image: dpage/pgadmin4
    restart: always
    volumes:
      # need to chown -R 5050:5050 _volumes/pgadmin
      - ./backend/pgadmin/_volumes/pgadmin:/var/lib/pgadmin
      - ./backend/pgadmin/servers.json:/pgadmin4/servers.json:ro
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    labels:
      - traefik.enable=true
      - traefik.http.routers.${PROJECT_NAME}-pgadmin.rule=Host(`${PGADMIN_HOST}`)
      - traefik.http.routers.${PROJECT_NAME}-pgadmin.tls=true
      - traefik.http.routers.${PROJECT_NAME}-pgadmin.tls.certresolver=letsencrypt

  hasura:
    image: hasura/graphql-engine:v2.36.0-ce
    depends_on:
      - postgres
    restart: always
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres
      HASURA_GRAPHQL_JWT_SECRET: ${HASURA_GRAPHQL_JWT_SECRET}
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: public
      HASURA_GRAPHQL_LOG_LEVEL: debug
      HASURA_GRAPHQL_ENABLE_CONSOLE: true
      FUNCTIONS_URL: http://functions:3000
    expose:
      - 8080 # for graphql-codegen
    labels:
      - traefik.enable=true
      - traefik.http.routers.${PROJECT_NAME}-hasura.rule=Host(`${HASURA_HOST}`) && PathPrefix(`/`)
      - traefik.http.services.${PROJECT_NAME}-hasura.loadbalancer.server.port=8080
      - traefik.http.routers.${PROJECT_NAME}-hasura.tls=true
      - traefik.http.routers.${PROJECT_NAME}-hasura.tls.certresolver=letsencrypt

  auth:
    image: nhost/hasura-auth
    depends_on:
      - postgres
      - hasura
    restart: always
    volumes:
      - ./backend/auth/email-templates:/app/email-templates:ro
    environment:
      AUTH_HOST: '0.0.0.0'
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres
      HASURA_GRAPHQL_GRAPHQL_URL: http://hasura:8080/v1/graphql
      HASURA_GRAPHQL_JWT_SECRET: ${HASURA_GRAPHQL_JWT_SECRET}
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      AUTH_SERVER_URL: ${AUTH_SERVER_URL}
      AUTH_CLIENT_URL: ${AUTH_CLIENT_URL}
      AUTH_SMTP_HOST: ${AUTH_SMTP_HOST}
      AUTH_SMTP_PORT: ${AUTH_SMTP_PORT}
      AUTH_SMTP_USER: ${AUTH_SMTP_USER}
      AUTH_SMTP_PASS: ${AUTH_SMTP_PASS}
      AUTH_SMTP_SENDER: ${AUTH_SMTP_SENDER}
      AUTH_GRAVATAR_DEFAULT: ${AUTH_GRAVATAR_DEFAULT}
    labels:
      - traefik.enable=true
      - traefik.http.routers.${PROJECT_NAME}-auth.rule=Host(`${AUTH_HOST}`)
      - traefik.http.services.${PROJECT_NAME}-auth.loadbalancer.server.port=4000
      - traefik.http.routers.${PROJECT_NAME}-auth.tls=true
      - traefik.http.routers.${PROJECT_NAME}-auth.tls.certresolver=letsencrypt

  storage:
    image: nhost/hasura-storage:0.6.0
    depends_on:
      - postgres
      - hasura
      - minio
    restart: always
    command: serve
    environment:
      PUBLIC_URL: ${STORAGE_PUBLIC_URL}
      HASURA_METADATA: 1
      HASURA_ENDPOINT: http://hasura:8080/v1
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_BUCKET: ${S3_BUCKET}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      POSTGRES_MIGRATIONS: 1
      POSTGRES_MIGRATIONS_SOURCE: postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres?sslmode=disable
    labels:
      - traefik.enable=true
      - traefik.http.routers.${PROJECT_NAME}-storage.rule=Host(`${STORAGE_HOST}`)
      - traefik.http.services.${PROJECT_NAME}-storage.loadbalancer.server.port=8000
      - traefik.http.routers.${PROJECT_NAME}-storage.tls=true
      - traefik.http.routers.${PROJECT_NAME}-storage.tls.certresolver=letsencrypt

  functions:
    image: nhost/functions:1
    restart: always
    volumes:
      - ./backend/functions:/opt/project/functions
      # - .:/opt/project
      # - functions_node_modules:/opt/project/node_modules
    expose:
      - 3000
    labels:
      - traefik.enable=true
      - traefik.http.routers.${PROJECT_NAME}-functions.rule=Host(`${FUNCTIONS_HOST}`)
      - traefik.http.services.${PROJECT_NAME}-functions.loadbalancer.server.port=3000
      - traefik.http.routers.${PROJECT_NAME}-functions.tls=true
      - traefik.http.routers.${PROJECT_NAME}-functions.tls.certresolver=letsencrypt
  #
  # quasar:
  #   image: steebchen/nginx-spa:stable
  #   restart: always
  #   volumes:
  #     - ./frontend/quasar/dist/spa:/app
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.${PROJECT_NAME}-quasar.rule=Host(`${QUASAR_HOST}`)
  #     - traefik.http.services.${PROJECT_NAME}-quasar.loadbalancer.server.port=80
  #     - traefik.http.routers.${PROJECT_NAME}-quasar.tls=true
  #     - traefik.http.routers.${PROJECT_NAME}-quasar.tls.certresolver=letsencrypt
